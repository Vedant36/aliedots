#!/usr/bin/env sh
# builtin default config {{{
userresources="$XDG_CONFIG_HOME"/X11/Xresources
# usermodmap=$XDG_CONFIG_HOME/X11/Xmodmap
[ -f "$userresources" ] && xrdb "$userresources"
# [ -f $usermodmap ] && xmodmap $usermodmap
# start some nice programs
[ -d /etc/X11/xinit/xinitrc.d ] && for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
	[ -x "$f" ] && . "$f"
done
unset f

# X configuration {{{1
# resolution
#cvt 1920 1080 60 # put the modeline from this after `xrandr --newmode` as in the next line
xrandr --newmode "1920x1080_60.00" 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync
xrandr --addmode Virtual-1 1920x1080_60.00
xrandr --output Virtual-1 --mode 1920x1080_60.00
# keyboard
setxkbmap -option altwin:swap_alt_win
setxkbmap -option ctrl:nocaps
# for another mod key
#clear mod3
#keysym F8 = Hyper_R
xset r rate 200 200 # key delay and repeat
xset m 4 0 # mouse speed
# turn off repeat for return and tab
xset -r 36
# screen deactivate and turn off times
xset s expose
xset s noblank
xset s 400 0
xset dpms 450 450 450

# startup programs {{{1
# X only programs
# TODO: write wrapper to check if the command exists and log them with a prefix
# removes cursor from screen after a set itme
xcape -e 'Control_L=Escape' -t 100
unclutter --timeout 2 --jitter 40 --start-hidden --ignore-scrolling &
pgrep artha || artha &	# offline dictionary
feh --no-fehbg --bg-fill ~/pix/current* &
dunst &	 # notification server
xcompmgr &	# compositor
xss-lock -n 'bright -i -5' -l lock &
redshift -l 23.5:78.5 -m randr &
# display agnostic programs
pactl set-source-mute @DEFAULT_SOURCE@ 1
[ ! -s "$XDG_LIB_HOME"/mpd/pid ] && mpd
pgrep mpdscribble || \
	mpdscribble --conf "$HOME"/.local/lib/private/lastfm.conf &
# pgrep ssh-agent || eval "$(ssh-agent -s)"

# window manager {{{1
# its in a loop so i can reload configuration by just killing dwm
# and close X by doing pkill -x Xorg
# TODO: find way to properly stop dwm_bar and artha when Xorg dies
dwm_bar() {
    while xsetroot -name "$(bar.sh)"; do
        # synchronize dwmblocks with the time
        sleep $((60-$(date +%s)%60)) &
        echo $! > "$XDG_STATE_HOME"/sleep_pid
        wait $!
        # stop if X not alive
        xset q >/dev/null 2>&1 || return
    done
}
while true; do
	dwm_bar &
	ssh-agent dwm >"$XDG_LOG_HOME"/dwm.log 2>&1 || exit
done
trap 'pkill "$SSH_AGENT_PID";' EXIT HUP TERM QUIT

