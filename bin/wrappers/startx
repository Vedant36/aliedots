#!/bin/sh

# Originally shipped with xorg-xinit
# Original File Size: 233 lines (162 sloc)
# Modified by: Vedant36
# I made this script xdg base directory specification friendly

unset SESSION_MANAGER
userclientrc=${XDG_CONFIG_HOME:-$HOME/.config}/X11/xinitrc
userserverrc=${XDG_CONFIG_HOME:-$HOME/.config}/X11/xserverrc
sysclientrc=/etc/X11/xinit/xinitrc
sysserverrc=/etc/X11/xinit/xserverrc

defaultclient=xterm
defaultserver=/usr/bin/X
defaultclientargs=""
defaultserverargs=""
defaultdisplay=""
clientargs=""
serverargs=""
vtarg=""
enable_xauth=1


# Automatically determine an unused $DISPLAY
d=0
while true ; do
	[ -e "/tmp/.X$d-lock" ] || [ -S "/tmp/.X11-unix/X$d" ] || break
	d=$((d + 1))
done
defaultdisplay=":$d"
unset d

whoseargs="client"
while [ "$1" ]; do
	case "$1" in
		# '' required to prevent cpp from treating "/*" as a C comment.
		/''*|\./''*)
		if [ "$whoseargs" = "client" ]; then
			if [ -z "$client" ] && [ -z "$clientargs" ]; then
				client="$1"
			else
				clientargs="$clientargs $1"
			fi
		else
			if [ -z "$server" ] && [ -z "$serverargs" ]; then
				server="$1"
			else
				serverargs="$serverargs $1"
			fi
		fi
		;;
	--)
		whoseargs="server"
		;;
	*)
		if [ "$whoseargs" = "client" ]; then
			clientargs="$clientargs $1"
		else
			# display must be the FIRST server argument
			if [ -z "$serverargs" ] && expr "$1" : ':[0-9][0-9]*$' > /dev/null 2>&1; then
							display="$1"
						else
							serverargs="$serverargs $1"
			fi
		fi
		;;
esac
shift
done

# process client arguments
if [ -z "$client" ]; then
	client=$defaultclient

	# For compatibility reasons, only use startxrc if there were no client command line arguments
	if [ -z "$clientargs" ]; then
		if [ -f "$userclientrc" ]; then
			client=$userclientrc
		elif [ -f "$sysclientrc" ]; then
			client=$sysclientrc
		fi
	fi
fi

# if no client arguments, use defaults
if [ -z "$clientargs" ]; then
	clientargs=$defaultclientargs
fi

# process server arguments
if [ -z "$server" ]; then
	server=$defaultserver


	# When starting the defaultserver start X on the current tty to avoid
	# the startx session being seen as inactive:
	# "https://bugzilla.redhat.com/show_bug.cgi?id=806491"
	tty=$(tty)
	if expr "$tty" : '/dev/tty[0-9][0-9]*$' > /dev/null; then
		tty_num=$(echo "$tty" | grep -oE '[0-9]+$')
		vtarg="vt$tty_num -keeptty"
	fi


	# For compatibility reasons, only use xserverrc if there were no server command line arguments
	if [ -z "$serverargs" ] && [ -z "$display" ]; then
		if [ -f "$userserverrc" ]; then
			server=$userserverrc
		elif [ -f "$sysserverrc" ]; then
			server=$sysserverrc
		fi
	fi
fi

# if no server arguments, use defaults
[ -z "$serverargs" ] && serverargs=$defaultserverargs

# if no vt is specified add vtarg (which may be empty)
have_vtarg="no"
for i in $serverargs; do
	if expr "$i" : 'vt[0-9][0-9]*$' > /dev/null; then
		have_vtarg="yes"
	fi
done
[ "$have_vtarg" = "no" ] && serverargs="$serverargs $vtarg"

# if no display, use default
[ -z "$display" ] && display=$defaultdisplay

if [ "$enable_xauth" = 1 ] ; then
	if [ "$XAUTHORITY" ]; then
		if [ "$XDG_RUNTIME_DIR" ]; then
			export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority
		else
			XAUTHORITY="$HOME"/.Xauthority
		fi
	fi

	removelist=

	# set up default Xauth info for this machine
	hostname=$(uname -n)

	authdisplay=${display:-:0}

	mcookie=$(/usr/bin/mcookie)

	if [ -z "$mcookie" ]; then
		echo "Couldn't create cookie"
		exit 1
	fi
	dummy=0

	# create a file with auth information for the server. ':0' is a dummy.
	xserverauthfile=$(mktemp -p /tmp serverauth.XXXXXXXXXX)
	trap 'rm -f "$xserverauthfile"' HUP INT QUIT ILL TRAP BUS TERM
	xauth -q -f "$xserverauthfile" << EOF
add :$dummy . $mcookie
EOF




serverargs=${serverargs}" -auth "${xserverauthfile}


	# now add the same credentials to the client authority file
	# if '$displayname' already exists do not overwrite it as another
	# server may need it. Add them to the '$xserverauthfile' instead.
	for displayname in $authdisplay $hostname/unix$authdisplay; do
		authcookie=$(xauth list "$displayname" \
			| sed -n "s/.*$hostname\/unix$authdisplay[[:space:]*].*[[:space:]*]//p") 2>/dev/null;
					if [ "z${authcookie}" = "z" ] ; then
						xauth -q << EOF
add $displayname . $mcookie
EOF
removelist="$displayname $removelist"
else
	dummy=$((dummy+1));
	xauth -q -f "$xserverauthfile" << EOF
add :$dummy . $authcookie
EOF
					fi
				done
fi

# server args should not have quotes as it is intended for multiple arguments to be passed to it
xinit "$client" "$clientargs" -- "$server" $display $serverargs

retval=$?

if [ "$enable_xauth" = 1 ] ; then
	[ "$removelist" ] && xauth remove $removelist
	[ "$xserverauthfile" ] && rm -f "$xserverauthfile"
fi

command -v deallocvt > /dev/null 2>&1 && deallocvt

exit $retval
