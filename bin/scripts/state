#!/usr/bin/env sh
## script to manage on and off states for things like:
## xcape, dunst, dpms, redshift, unclutter, wallpaper, wifi, xcompmgr, xss-lock
## Dependencies: coreutils(nl), procps-ng(pgrep), dmenu
## Update 1.1 on 2022-02-13:
##   - made script less repetitive by adding the toggle function
##   - add line numbers(L15) for easy selection
## TODO: merge this with xinitrc

# SYSTEM_DEPENDENT: interface might be different on different machines
INTERFACE=wlo1
choice=$(echo "\
xcape $(pgrep xcape | wc -l)
wifi $(nmcli device status | grep -c "^$INTERFACE.* connected") \
$(nmcli connection show --active 2>&1 | grep -Po "Neema(?=.* $INTERFACE)")
xss-lock $(pgrep xss-lock | wc -l)
unclutter $(pgrep unclutter | wc -l)
wallpaper
dpms $(xset q | grep -Po 'DPMS is \K\S+')
xcompmgr $(pgrep xcompmgr | wc -l)
redshift $(pgrep redshift | wc -l)
dunst(Reload)
mpdscribble(Reload)
" | nl -s" " -v0 -w1 | dmenu -l 20)
[ -z "$choice" ] && exit 0

# Temporary: logging to know the perfect order
echo "$choice" >> "$XDG_STATE_HOME"/state.log

toggle(){
	cmd="$1"; shift
	if pgrep "$cmd"; then
		pkill "$cmd"
	else
		command -v "$cmd" >/dev/null && exec "$cmd" "$@" &
	fi
}

case $choice in
	*xcape*)
		toggle xcape -e 'Control_L=Escape' -t 100 ;;
	*wifi*)
		if nmcli device status | grep "^$INTERFACE.* connected"; then
			nmcli device disconnect "$INTERFACE"
		else
			nmcli device connect "$INTERFACE"
		fi
		;;
	*xss-lock*)
		toggle xss-lock -n 'bright -i -5' -l lock ;;
	*unclutter*)
		toggle unclutter --timeout 2 --jitter 40 \
					--start-hidden --ignore-scrolling & ;;
	*wallpaper)
		feh --no-fehbg --bg-fill ~/pix/current* ;;
	*dpms*)
		if [ "$(xset q | grep -Po 'DPMS is \K\S+')" = "Enabled" ]; then
			xset -dpms
		else
			xset +dpms
		fi
		;;
	*xcompmgr*)
		toggle xcompmgr
		;;
	*redshift*)
		toggle redshift -l 23.5:78.5 & ;;
	*dunst*)
		# Reload
		pkill dunst && dunst & ;;
	*mpdscribble*)
		pkill mpdscribble && \
			mpdscribble --conf "$HOME"/.local/lib/private/lastfm.conf & ;;
	*)
		exit 1 ;;
esac
# vim: noet
